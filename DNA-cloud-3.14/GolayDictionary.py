# -*- coding: utf-8 -*-
from random import randint
import golayEncoding
keyList = []
valueList = []
reverseDict = dict()
golayDict = {"0": "00000000000",
             "85": "00002111202",
             "170": "00001222101",
             "127": "00020220222",
             "253": "00022001121",
             "52": "00021112020",
             "138": "00010110111",
             "41": "00012221010",
             "86": "00011002212",
             "42": "00201010122",
             "100": "00200121021",
             "44": "00202202220",
             "250": "00221200011",
             "132": "00220011210",
             "161": "00222122112",
             "98": "00211120200",
             "8": "00210201102",
             "34": "00212012001",
             "10": "00102020211",
             "149": "00101101110",
             "87": "00100212012",
             "21": "00122210100",
             "74": "00121021002",
             "36": "00120102201",
             "69": "00112100022",
             "177": "00111211221",
             "20": "00110022120",
             "213": "02012212122",
             "163": "02011020021",
             "229": "02010101220",
             "255": "02002102011",
             "197": "02001210210",
             "133": "02000021112",
             "252": "02022022200",
             "26": "02021100102",
             "173": "02020211001",
             "151": "02210222211",
             "82": "02212000110",
             "75": "02211111012",
             "37": "02200112100",
             "166": "02202220002",
             "191": "02201001201",
             "88": "02220002022",
             "63": "02222110221",
             "68": "02221221120",
             "150": "02111202000",
             "76": "02110010202",
             "4": "02112121101",
             "154": "02101122222",
             "234": "02100200121",
             "22": "02102011020",
             "162": "02121012111",
             "105": "02120120010",
             "102": "02122201212",
             "171": "01021121211",
             "104": "01020202110",
             "169": "01022010012",
             "196": "01011011100",
             "208": "01010122002",
             "84": "01012200201",
             "130": "01001201022",
             "146": "01000012221",
             "72": "01002120120",
             "16": "01222101000",
             "66": "01221212202",
             "24": "01220020101",
             "106": "01212021222",
             "223": "01211102121",
             "58": "01210210020",
             "137": "01202211111",
             "73": "01201022010",
             "101": "01200100212",
             "168": "01120111122",
             "181": "01122222021",
             "175": "01121000220",
             "251": "01110001011",
             "40": "01112112210",
             "140": "01111220112",
             "17": "01100221200",
             "83": "01102002102",
             "254": "01101110001",
             "240": "20121202122",
             "214": "20120010021",
             "53": "20122121220",
             "202": "20111122011",
             "25": "20110200210",
             "18": "20112011112",
             "247": "20101012200",
             "174": "20100120102",
             "112": "20102201001",
             "89": "20022212211",
             "210": "20021020110",
             "217": "20020101012",
             "248": "20012102100",
             "194": "20011210002",
             "182": "20010021201",
             "80": "20002022022",
             "79": "20001100221",
             "195": "20000211120",
             "12": "20220222000",
             "209": "20222000202",
             "165": "20221111101",
             "245": "20210112222",
             "2": "20212220121",
             "81": "20211001020",
             "38": "20200002111",
             "141": "20202110010",
             "211": "20201221212",
             "239": "22100111211",
             "95": "22102222110",
             "43": "22101000012",
             "224": "22120001100",
             "203": "22122112002",
             "145": "22121220201",
             "147": "22110221022",
             "19": "22112002221",
             "50": "22111110120",
             "136": "22001121000",
             "107": "22000202202",
             "134": "22002010101",
             "109": "22021011222",
             "153": "22020122121",
             "148": "22022200020",
             "205": "22011201111",
             "212": "22010012010",
             "54": "22012120212",
             "241": "22202101122",
             "156": "22201212021",
             "115": "22200020220",
             "116": "22222021011",
             "78": "22221102210",
             "67": "22220210112",
             "70": "22212211200",
             "178": "22211022102",
             "159": "22210100001",
             "142": "21112020000",
             "92": "21111101202",
             "48": "21110212101",
             "90": "21102210222",
             "218": "21101021121",
             "126": "21100102020",
             "39": "21122100111",
             "219": "21121211010",
             "167": "21120022212",
             "114": "21010000122",
             "172": "21012111021",
             "14": "21011222220",
             "120": "21000220011",
             "139": "21002001210",
             "160": "21001112112",
             "33": "21020110200",
             "179": "21022221102",
             "117": "21021002001",
             "225": "21211010211",
             "129": "21210121110",
             "183": "21212202012",
             "230": "21201200100",
             "35": "21200011002",
             "93": "21202122201",
             "6": "21221120022",
             "32": "21220201221",
             "56": "21222012120",
             "158": "10212101211",
             "185": "10211212110",
             "47": "10210020012",
             "143": "10202021100",
             "123": "10201102002",
             "204": "10200210201",
             "242": "10222211022",
             "111": "10221022221",
             "103": "10220100120",
             "108": "10110111000",
             "9": "10112222202",
             "65": "10111000101",
             "249": "10100001222",
             "13": "10102112121",
             "180": "10101220020",
             "226": "10120221111",
             "144": "10122002010",
             "15": "10121110212",
             "57": "10011121122",
             "128": "10010202021",
             "135": "10012010220",
             "243": "10001011011",
             "190": "10000122210",
             "207": "10002200112",
             "77": "10021201200",
             "45": "10020012102",
             "91": "10022120001",
             "192": "12221010000",
             "186": "12220121202",
             "216": "12222202101",
             "97": "12211200222",
             "118": "12210011121",
             "246": "12212122020",
             "215": "12201120111",
             "51": "12200201010",
             "206": "12202012212",
             "184": "12122020122",
             "227": "12121101021",
             "233": "12120212220",
             "237": "12112210011",
             "188": "12111021210",
             "113": "12110102112",
             "49": "12102100200",
             "201": "12101211102",
             "155": "12100022001",
             "222": "12020000211",
             "231": "12022111110",
             "5": "12021222012",
             "27": "12010220100",
             "131": "12012001002",
             "164": "12011112201",
             "3": "12000110022",
             "46": "12002221221",
             "119": "12001002120",
             "28": "11200222122",
             "176": "11202000021",
             "23": "11201111220",
             "64": "11220112011",
             "157": "11222220210",
             "187": "11221001112",
             "244": "11210002200",
             "238": "11212110102",
             "96": "11211221001",
             "235": "11101202211",
             "60": "11100010110",
             "1": "11102121012",
             "110": "11121122100",
             "200": "11120200002",
             "221": "11122011201",
             "99": "11111012022",
             "31": "11110120221",
             "198": "11112201120",
             "193": "11002212000",
             "125": "11001020202",
             "124": "11000101101",
             "152": "11022102222",
             "122": "11021210121",
             "71": "11020021020",
             "94": "11012022111",
             "220": "11011100010",
             "29": "11010211212",
             "199": "00000201211",
             "61": "00000102122",
             "11": "00002012110",
             "228": "00002210021",
             "62": "00001021220",
             "55": "00001120012",
             "121": "00020121100",
             "7": "00020022011",
             "30": "00022100210",
             "232": "00022202002",
             "189": "00021010201",
             "59": "00010212200",
             "236": "00010011022"
             }
# encodes single byte1 to trits
# Input : A single character
def encode(byte1):
    global golayDict
    return golayDict[str(ord(str(byte1)))]


def encodeDirect(byte1):
    global golayDict
    return golayDict[str(byte1)]


# encodes string of bytes. Each bytes represented as characters
# String of characters
def encodeSTR(str1):
    tritString = []
    for byte1 in str(str1):
        tritString.append(encode(byte1))
    return ''.join(tritString)


# reads 1 byte at a time from the file and encodes it to trits
def encodeSTRtemp():
    tritstring = []
    i=0
    for i in range(0,9):
        data = golayEncoding.inputFiletemp.read(1)
        if (not data):
            break
        tritstring.append(encodetemp(data))
        i = i+1
    return ''.join(tritstring)


def encodetemp(byte1):
    global golayDict
    return golayDict[str(ord(byte1))]


def decode(tritString):
    dec1 = reverseDict.get(tritString, "-1")
    if dec1 != "-1":
        return int(dec1)
    listOfMin = []
    minDistance = 15
    for i in range(len(valueList)):
        hammingDist = hammingDistance(tritString, valueList[i])
        if hammingDist < minDistance:
            minDistance = hammingDist
            listOfMin = []
            listOfMin.append(i)
        elif hammingDist == minDistance:
            listOfMin.append(i)
    return int(keyList[listOfMin[randint(0, len(listOfMin)-1)]])


def decodeSTR(str1):
    byteString = []
    i = 0
    while i < len(str1):
        byteString.append(decode(str1[i:i+11]))
        i = i + 11
    return byteString


def hammingDistance(string1, string2):
    noOfErrors = 0
    for i in range(len(string1)):
        if string1[i] != string2[i]:
            noOfErrors = noOfErrors + 1
    return noOfErrors


def initDict():
    global golayDict, keyList, valueList, reverseDict
    keyList = list(golayDict.keys())
    valueList = list(golayDict.values())
    for i in range(0, len(valueList)):
        reverseDict[valueList[i]] = keyList[i]